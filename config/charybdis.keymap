#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 3 4 5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
        bindings = <&ib_toggle_layer 5>;
    };

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <12>;
    };

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 16>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <10>;
    };

    behaviors {
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <240>;
            quick-tap-ms = <0>;
            bindings = <&mo>, <&kp>;
        };

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <8 9>;
            require-prior-idle-ms = <100>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            require-prior-idle-ms = <100>;
        };

        bt+boot_right {
            bindings = <&mo 4>;
            key-positions = <5 6 7 8>;
        };

        bt+boot_left {
            bindings = <&mo 4>;
            key-positions = <1 2 3 4>;
            require-prior-idle-ms = <100>;
        };

        leftpar {
            bindings = <&kp LPAR>;
            key-positions = <23 24>;
            require-prior-idle-ms = <100>;
        };

        rightpar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <25 26>;
            require-prior-idle-ms = <100>;
        };

        leftbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <13 14>;
            require-prior-idle-ms = <100>;
        };

        rightbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <15 16>;
            require-prior-idle-ms = <100>;
        };

        leftbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
            require-prior-idle-ms = <100>;
        };

        rightbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <5 6>;
            require-prior-idle-ms = <100>;
        };

        lt {
            bindings = <&kp LT>;
            key-positions = <22 23>;
            require-prior-idle-ms = <100>;
        };

        gt {
            bindings = <&kp GT>;
            key-positions = <26 27>;
            require-prior-idle-ms = <100>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <16 17>;
            require-prior-idle-ms = <100>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <6 7>;
            require-prior-idle-ms = <100>;
        };

        caps {
            bindings = <&kp CLCK>;
            key-positions = <13 16>;
            require-prior-idle-ms = <100>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <12 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q              &kp W            &kp E            &kp R        &kp T        &kp Y      &kp U            &kp I             &kp O             &kp P
  &bhm LEFT_SHIFT A  &bhm LEFT_GUI S  &bhm LEFT_ALT D  &kp F        &kp G        &kp H      &kp K            &bhm RIGHT_ALT K  &bhm RIGHT_GUI L  &bhm RIGHT_SHIFT SLASH
  &kp Z              &kp X            &kp C            &kp V        &lt 3 B      &lt 7 N    &lt 6 M          &lt 5 COMMA       &kp DOT           &kp ENTER
                                      &kp LEFT_GUI     &lt 1 SPACE  &kp LCTRL    &lt 1 ESC  &lt 2 BACKSPACE
            >;
        };

        Lower {
            label = "Lower";
            bindings = <
  &kp LS(TAB)  &kp TAB    &none      &none            &kp HOME    &kp PG_UP   &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)
  &kp LC(A)    &none      &none      &kp PRINTSCREEN  &kp END     &kp PG_DN   &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT
  &kp LC(Z)    &kp LC(X)  &kp LC(C)  &kp LC(V)        &kp INS     &kp DELETE  &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)
                          &trans     &trans           &trans      &trans      &trans
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
  &kp N0        &kp N1  &kp N2    &kp N3     &kp MINUS    &kp UNDER    &kp AT    &kp GRAVE         &kp CARET          &kp SEMI
  &kp ASTERISK  &kp N4  &kp N5    &kp N6     &kp PLUS     &kp PERCENT  &kp HASH  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp COLON
  &kp SLASH     &kp N7  &kp N8    &kp N9     &kp EQUAL    &kp DOLLAR   &kp AMPS  &kp TILDE         &kp PIPE           &kp BACKSLASH
                        &kp LEFT  &kp RIGHT  &trans       &trans       &trans
            >;
        };

        Fn {
            label = "Fn";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2   &kp F3   &kp F4
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F5  &kp F6   &kp F7   &kp F8
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F9  &kp F10  &kp F11  &kp F12
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        bt+boot {
            label = "bt+boot";
            bindings = <
  &bt BT_NXT    &bt BT_PRV  &none  &none  &none          &none        &none  &none  &none  &none
  &bt BT_CLR    &none       &none  &none  &none          &none        &none  &none  &none  &none
  &out OUT_TOG  &none       &none  &none  &bootloader    &bootloader  &none  &none  &none  &none
                            &none  &none  &none          &none        &none
            >;
        };

        Mouse {
            bindings = <
  &trans  &trans  &trans     &trans     &trans       &trans  &trans          &trans  &trans  &none
  &trans  &trans  &trans     &trans     &trans       &trans  &trans          &trans  &trans  &trans
  &none   &trans  &trans     &trans     &trans       &none   &kp LEFT_SHIFT  &trans  &trans  &trans
                  &mkp LCLK  &mkp MCLK  &mkp RCLK    &trans  &trans
            >;
        };

        macro-1 {
            bindings = <
  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &none       &none    &none  &none  &none  &none  &none
  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &none       &none    &none  &none  &none  &none  &none
  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)  &none    &none  &none  &none  &none  &none
                          &none       &none       &none    &none  &none
            >;
        };

        macro-2 {
            bindings = <
  &kp LG(LS(N1))  &kp LG(LS(N2))  &kp LS(LG(N3))  &none           &none    &none  &none  &none  &none  &none
  &kp LG(LS(N4))  &kp LG(LS(N5))  &kp LG(LS(N6))  &none           &none    &none  &none  &none  &none  &none
  &kp LG(LS(N7))  &kp LG(LS(N8))  &kp LG(LS(N9))  &kp LS(LG(N0))  &none    &none  &none  &none  &none  &none
                                  &none           &none           &none    &none  &none
            >;
        };
    };
};
